'''
                                               Experiment No : 4
                                       Aim: Implementation of A* Algorithm.
                                                                        
                                                                           SNAME : KAPADIA MOHAMMED ANAS TARIQ
                                                                           ROLL NO : 22DCO01
                                                                           Batch 03
                                                                                          
Theory:

A* Algorithm:


Step 1: 

    Place the starting node into the OPEN list.

Step 2: 

    If the OPEN list is empty, Stop and return failure.
    
Step 3: 

    Remove the node n, from the OPEN list which has the lowest value of h(n), and places it in the CLOSED list.
    
Step 4: 

    Expand the node n, and generate the successors of node n.
    
Step 5: 

    Check each successor of node n, and find whether any node is a goal node or not. If any successor node is goal node, 
    then return success and terminate the search, else proceed to Step 6.
    
Step 6: 

    For each successor node, algorithm checks for evaluation function f(n), and then check if the node has been in either 
    OPEN or CLOSED list. If the node has not been in both list, then add it to the OPEN list.
    
Step 7: 

    Return to Step 2.

'''


# Program:

class box():
    #A box class for A* Pathfinding

    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0
        self.h = 0
        self.f = 0

    def __eq__(self, other):
        return self.position == other.position


def astar(maze, start, end):
    # Returns a list of tuples as a path from the given start to the given end in the given board

    # Create start and end node
    start_node = box(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = box(None, end)
    end_node.g = end_node.h = end_node.f = 0

    # Initialize both open and closed list
    open_list = []
    closed_list = []

    # Add the start node
    open_list.append(start_node)

    # Loop until you find the end
    while len(open_list) > 0:

        # Get the current node
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index

        # Pop current off open list, add to closed list
        open_list.pop(current_index)
        closed_list.append(current_node)

        # Found the goal
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1] # Return reversed path

        # Generate children
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares

            # Get node position
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            # Make sure within range
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:
                continue

            # Make sure walkable terrain
            if maze[node_position[0]][node_position[1]] != 0:
                continue

            # Create new node
            new_node = box(current_node, node_position)

            # Append
            children.append(new_node)

        # Loop through children
        for child in children:

            # Child is on the closed list
            for closed_child in closed_list:
                if child == closed_child:
                    continue

            # Create the f, g, and h values
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h

            # Child is already in the open list
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue

            # Add the child to the open list
            open_list.append(child)


def main():

    board = [[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 0]]

    start = (0, 0)
    end = (6, 6)

    path = astar(board, start, end)
    print(path)

if __name__ == '__main__':
    main()


'''
Output:
PS C:\Users\ADMIN> & C:/Users/ADMIN/AppData/Local/Programs/Python/Python311/python.exe c:/Users/ADMIN/Downloads/Exp_3.py
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 3), (5, 4), (6, 5), (6, 6)]
'''